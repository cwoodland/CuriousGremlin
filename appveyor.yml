image:
- Visual Studio 2017
- Visual Studio 2015

configuration:
- Debug
- Release

platform:
- x86
- x64

for:
  - 
    matrix:
      only:
        - configuration: Debug
    environment:
      config: Debug

  - 
    matrix:
      only:
        - configuration: Release
    environment:
      config: Release

  -
    matrix:
      only:
        - platform: x86
    environment:
        plat: x86

  -
    matrix:
      only:
        - platform: x64
    environment:
        plat: x64

dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  package_version: '{version}'
  assembly_version: '{version}'
  file_version: '{version}'
  informational_version: '{version}'

before_build:
- cmd: nuget restore

build_script:
  - ps: MSBuild.exe CuriousGremlin.sln /p:Configuration=%config% /p:Platform=%plat% /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"

before_test:
- ps: Invoke-WebRequest -Uri 'https://aka.ms/cosmosdb-emulator' -OutFile 'cosmos-db.msi'
- ps: cmd /c start /wait msiexec /i cosmos-db.msi /qn /quiet /norestart /log install.log  
- ps: Set-Content -Value '"C:\Program Files\Azure Cosmos DB Emulator\CosmosDB.Emulator.exe" /NoUI /NoExplorer /NoFirewall' -Path .\startCosmosDb.cmd
- ps: Start-Process -FilePath .\startCosmosDb.cmd
- ps: |
    $attempt = 0
    $max = 3
    while(!$client.Connected -and $attempt -lt $max) {
      try {    
        $client = New-Object System.Net.Sockets.TcpClient([System.Net.Sockets.AddressFamily]::InterNetwork)
        $attempt++; $client.Connect("127.0.0.1", 8081); write-host "CosmosDB started"
      }
      catch {    
        if($attempt -eq $max) {
          write-host "CosmosDB was not started"; $client.Close(); return
          }  
        [int]$sleepTime = 5*$attempt
        write-host "CosmosDB is not started. Retry after $sleepTime seconds..."
        sleep $sleepTime;
        $client.Close()        
      }  
    }